import {
  useInsightArrayEffect,
  useRouteData,
  useRouteParam,
} from "~/utils/hooks";
import type { Meeting } from "~/utils/db";
import { json } from "@remix-run/node";
import { Link, useLoaderData } from "@remix-run/react";
import { GenerateInsight } from "~/components/insight/transactionModal";
import type { DiscordUser } from "~/auth.server";
import { DocumentTextIcon } from "@heroicons/react/24/outline";
import { useState } from "react";
import type { Insight } from "~/utils/supabase";
import { createSupabaseClient } from "~/utils/supabase";
import ReactMarkdown from "react-markdown";

export async function loader() {
  return json({
    openai_key: process.env.OPENAI_API_KEY,
    supabaseKey: process.env.SUPABASE_KEY,
    S3_BUCKET_REGION: process.env.S3_BUCKET_REGION,
    S3_BUCKET_NAME: process.env.S3_BUCKET_NAME,
    AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
    AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
  });
}

export default function MeetingPage() {
  let {
    openai_key,
    supabaseKey,
    S3_BUCKET_REGION,
    S3_BUCKET_NAME,
    AWS_ACCESS_KEY_ID,
    AWS_SECRET_ACCESS_KEY,
  } = useLoaderData<typeof loader>();

  const meetings =
    useRouteData<Meeting[]>("routes/dashboard.guilds.$guild") || [];

  const user = useRouteData<{ user: DiscordUser }>("root")?.user;
  const meetingId = useRouteParam<string>("routes/dashboard", "meeting");

  const thisMeeting = meetings.find((meeting) => meeting.id === meetingId);
  const [insights, setInsights] = useState<Insight[]>([]);
  const [loadingInsights, setLoadingInsights] = useState<boolean>(false);

  const fetchInsights = async () => {
    setLoadingInsights(true);
    const supabase = createSupabaseClient(supabaseKey!);
    const retrievedInsights = await supabase.getInsights(thisMeeting!.id);

    setInsights(retrievedInsights);
    setLoadingInsights(false);
  };

  useInsightArrayEffect(() => {
    fetchInsights();
  }, [insights, thisMeeting!.id]);

  return (
    <div className="p-10 min-h-screen whitespace-pre-line  max-w-4xl">
      <h1 className="text-3xl font-bold flex items-center">
        Insight
        <span className="ml-3">
          <GenerateInsight
            meeting={thisMeeting}
            supabaseKey={supabaseKey}
            openaiKey={openai_key}
            user={user!}
            fetchInsights={fetchInsights}
            S3_BUCKET_REGION={S3_BUCKET_REGION!}
            S3_BUCKET_NAME={S3_BUCKET_NAME!}
            AWS_ACCESS_KEY_ID={AWS_ACCESS_KEY_ID!}
            AWS_SECRET_ACCESS_KEY={AWS_SECRET_ACCESS_KEY!}
          />
        </span>
        <span className="ml-3">
          <div className="bg-gray-500 hover:bg-gray-700 text-white font-bold p-1 rounded-full">
            <Link
              to={`/transcript/${thisMeeting?.guildId}-${thisMeeting?.channelId}-${thisMeeting?.id}`}
              target="_blank"
            >
              <DocumentTextIcon className="text-white stroke-2 h-5 w-5" />
            </Link>
          </div>
        </span>
      </h1>

      <div className="mt-10">
        <h1 className="text-xl font-bold">Participants</h1>
        <ul className="list-disc ml-5">
          {thisMeeting!.participants.map((participant: string, id: any) => (
            <li key={id}>{participant.split("_")[0]}</li>
          ))}
        </ul>
        {/* separator line */}
        <div className="border-b-2 border-gray-200 "></div>
        <h1 className="text-xl font-bold mt-10">Insights</h1>
        {loadingInsights ? (
          <div className="mt-5">Loading...</div>
        ) : (
          <Collapsible insights={insights} />
        )}
      </div>
    </div>
  );
}

function Collapsible({ insights }: { insights: Insight[] }) {
  return (
    <div className="mt-5">
      {insights.map((insight, id) => (
        <div key={id}>
          <CollapsibleItem insight={insight} />
        </div>
      ))}
    </div>
  );
}

function CollapsibleItem({ insight }: { insight: Insight }) {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <div className="border-b-2 border-gray-200">
      <div className="flex items-center justify-between">
        <h1 className="text-lg font-bold">
          Generated by {insight.displayName}
        </h1>
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded-full"
        >
          {isOpen ? "Hide" : "Show"}
        </button>
      </div>
      {isOpen && (
        <div className="mt-5">
          <ReactMarkdown>{insight.text}</ReactMarkdown>
        </div>
      )}
    </div>
  );
}
